# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:33:32+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field


class Tokeninfo(BaseModel):
    audience: Optional[str] = Field(
        None,
        description='Who is the intended audience for this token. In general the same as issued_to.',
    )
    email: Optional[str] = Field(
        None,
        description='The email address of the user. Present only if the email scope is present in the request.',
    )
    expires_in: Optional[int] = Field(
        None,
        description='The expiry time of the token, as number of seconds left until expiry.',
    )
    issued_to: Optional[str] = Field(
        None,
        description='To whom was the token issued to. In general the same as audience.',
    )
    scope: Optional[str] = Field(
        None, description='The space separated list of scopes granted to this token.'
    )
    user_id: Optional[str] = Field(None, description='The obfuscated user id.')
    verified_email: Optional[bool] = Field(
        None,
        description='Boolean flag which is true if the email address is verified. Present only if the email scope is present in the request.',
    )


class Userinfo(BaseModel):
    email: Optional[str] = Field(None, description="The user's email address.")
    family_name: Optional[str] = Field(None, description="The user's last name.")
    gender: Optional[str] = Field(None, description="The user's gender.")
    given_name: Optional[str] = Field(None, description="The user's first name.")
    hd: Optional[str] = Field(
        None,
        description='The hosted domain e.g. example.com if the user is Google apps user.',
    )
    id: Optional[str] = Field(None, description='The obfuscated ID of the user.')
    link: Optional[str] = Field(None, description='URL of the profile page.')
    locale: Optional[str] = Field(None, description="The user's preferred locale.")
    name: Optional[str] = Field(None, description="The user's full name.")
    picture: Optional[str] = Field(None, description="URL of the user's picture image.")
    verified_email: Optional[bool] = Field(
        True,
        description="Boolean flag which is true if the email address is verified. Always verified because we only return the user's primary email address.",
    )


class Alt(Enum):
    json = 'json'
